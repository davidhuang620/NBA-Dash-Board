{"version":3,"sources":["components/Card.js","components/CardList.js","components/nbaPlayers.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","team","rank","react_default","a","createElement","className","alt","src","concat","CardList","nbaPlayers","map","val","ind","components_Card","key","winrate","trb","ast","stk","blk","pts","prob","SearchBox","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","OnSearchChange","event","setState","searchField","target","value","state","_this$state","searchResult","filter","obj","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27f3efb2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, team, rank}) => {\n   // const {name, team} = props;\n   return (\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n         <img alt='robotPhotos' src={`https://robohash.org/${name}?200x200`} />\n         <div>\n            <h2>{name}</h2>\n            <p> rank {rank}\n                team {team}  </p>\n         </div>\n      </div>\n   )\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n// import {nbaPlayers} from './nbaPlayers';\n\nconst CardList = ({nbaPlayers}) => {\n\n   // const cardArray = nbaPlayers.map((val, ind) => {\n   //    return (\n   //       <Card\n   //          key = {ind}\n   //          rank={val.rank}\n   //          name={val.name}\n   //          team={val.team}\n   //       />);\n   // });\n\n   return (<div>\n\n      {\n         nbaPlayers.map((val, ind) => {\n            return (\n               <Card\n                  key = {ind}\n                  rank={val.rank}\n                  name={val.name}\n                  team={val.team}\n               />);\n         })\n      }\n\n   </div>);\n\n}\n\nexport default CardList;\n","export const nbaPlayers = [\n\n   {\n      rank: 1,\n      name: 'Giannis Antetokounmpo',\n      team: 'MIL',\n      winrate: .697,\n      trb: 12.8,\n      ast: 5.9,\n      stk: 1.3,\n      blk: 1.4,\n      pts: 26.4,\n      prob: 38.1\n   }, {\n      rank: 2,\n      name: 'Anthony Davis',\n      team: 'NOP',\n      winrate: .429,\n      trb: 12.9,\n      ast: 4.6,\n      stk: 1.7,\n      blk: 2.7,\n      pts: 28.1,\n      prob: 6.4\n   }, {\n      rank: 3,\n      name: 'Kevin Durant',\n      team: 'GSW',\n      winrate: .657,\n      trb: 7.8,\n      ast: 6.1,\n      stk: 0.9,\n      blk: 1.0,\n      pts: 28.8,\n      prob: 11.3\n   }, {\n      rank: 4,\n      name: 'Joel Embiid',\n      team: 'PHI',\n      winrate: .629,\n      trb: 13.2,\n      ast: 3.5,\n      stk: 0.5,\n      blk: 1.8,\n      pts: 26.6,\n      prob: 4.6\n   }, {\n      rank: 5,\n      name: 'Paul George',\n      team: 'OKC',\n      winrate: .636,\n      trb: 8.4,\n      ast: 4.3,\n      stk: 2.2,\n      blk: 0.7,\n      pts: 26.3,\n      prob: 6.0\n   }, {\n      rank: 6,\n      name: 'James Harden',\n      team: 'HOU',\n      winrate: .545,\n      trb: 5.7,\n      ast: 8.4,\n      stk: 2.1,\n      blk: 0.5,\n      pts: 32.3,\n      prob: 10.0\n   }, {\n      rank: 7,\n      name: 'LeBron James',\n      team: 'LAL',\n      winrate: .588,\n      trb: 8.3,\n      ast: 7.1,\n      stk: 1.3,\n      blk: 0.7,\n      pts: 27.3,\n      prob: 6.3\n   }, {\n      rank: 8,\n      name: 'Nikola Jokic',\n      team: 'DEN',\n      winrate: .656,\n      trb: 9.8,\n      ast: 7.3,\n      stk: 1.5,\n      blk: 0.7,\n      pts: 17.7,\n      prob: 4.1\n   }, {\n      rank: 9,\n      name: 'Kawhi Leonard',\n      team: 'TOR',\n      winrate: .722,\n      trb: 8.4,\n      ast: 3.1,\n      stk: 1.8,\n      blk: 0.6,\n      pts: 26.9,\n      prob: 10.8\n   }, {\n      rank: 10,\n      name: 'Russell Westbrook',\n      team: 'OKC',\n      winrate: .636,\n      trb: 10.7,\n      ast: 10.2,\n      stk: 2.7,\n      blk: 0.2,\n      pts: 20.2,\n      prob: 2.4\n   }\n\n];\n","import React from 'react';\n\nconst SearchBox = ({SearchChange}) => {\n\n// bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\n\n\n\n   return(\n      <div className='pa2'>\n         <input\n         className='ba bg-light-blue pa3 ma2'\n         type='search'\n         placeholder='Search'\n         onChange = {SearchChange}\n         />\n      </div>\n   )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n\n      return (\n         <div style = {{overflowY: 'Scroll', border: '1px solid black', height: '800px'}}>\n            {props.children }\n         </div>\n      );\n};\n\nexport default Scroll;\n","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport {nbaPlayers} from '../components/nbaPlayers';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n\n\nclass App extends Component {\n\n   constructor(){\n      super();\n      this.state = {\n         nbaPlayers: nbaPlayers,\n         searchField: ''\n      }\n   }\n\n   // componentDidMount(){\n   //    fetch('https://jsonplaceholder.typicode.com/users')\n   //    .then(response => response.json())\n   //    .then(users => {this.setState({nbaPlayers: users})})\n   // }\n\n   OnSearchChange = (event) => {\n      this.setState({searchField: event.target.value});\n      // console.log(this.state.searchField);\n\n   }\n\n\n   render(){\n      const {nbaPlayers, searchField} = this.state;\n      const searchResult = nbaPlayers.filter(\n         obj => {\n            return (\n               obj.name.toLowerCase().includes(searchField.toLowerCase())\n            )\n         }\n      )\n\n      return (nbaPlayers.length === 0)\n      ? (<h1 className ='tc'> LOADING </h1>)\n      :\n      (\n         <div className = 'tc'>\n            <h1 className = 'f1'>NBA Dash Board</h1>\n            <SearchBox SearchChange = {this.OnSearchChange}/>\n            <Scroll>\n               <CardList nbaPlayers = {searchResult}/>\n            </Scroll>\n         </div>\n      )\n   \n\n   };\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\n\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n   <App / > , document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}